// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: proto.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerNode_Bid_FullMethodName                = "/homework5.ServerNode/Bid"
	ServerNode_Result_FullMethodName             = "/homework5.ServerNode/Result"
	ServerNode_AnnounceConnection_FullMethodName = "/homework5.ServerNode/AnnounceConnection"
	ServerNode_AnnounceUpdate_FullMethodName     = "/homework5.ServerNode/AnnounceUpdate"
	ServerNode_RequestLeadership_FullMethodName  = "/homework5.ServerNode/RequestLeadership"
	ServerNode_IExist_FullMethodName             = "/homework5.ServerNode/IExist"
	ServerNode_IAmLeader_FullMethodName          = "/homework5.ServerNode/IAmLeader"
)

// ServerNodeClient is the client API for ServerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerNodeClient interface {
	// API for clients:
	// dont know if (void) can be expressed like this
	Bid(ctx context.Context, in *BidInput, opts ...grpc.CallOption) (*Confirmation, error)
	Result(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Outcome, error)
	AnnounceConnection(ctx context.Context, in *ConnectionAnnouncement, opts ...grpc.CallOption) (*Confirmation, error)
	AnnounceUpdate(ctx context.Context, in *UpdateAnnouncement, opts ...grpc.CallOption) (*Confirmation, error)
	RequestLeadership(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessRequestResponse, error)
	IExist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	IAmLeader(ctx context.Context, in *ConnectionAnnouncement, opts ...grpc.CallOption) (*Empty, error)
}

type serverNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewServerNodeClient(cc grpc.ClientConnInterface) ServerNodeClient {
	return &serverNodeClient{cc}
}

func (c *serverNodeClient) Bid(ctx context.Context, in *BidInput, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, ServerNode_Bid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) Result(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, ServerNode_Result_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) AnnounceConnection(ctx context.Context, in *ConnectionAnnouncement, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, ServerNode_AnnounceConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) AnnounceUpdate(ctx context.Context, in *UpdateAnnouncement, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, ServerNode_AnnounceUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) RequestLeadership(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessRequestResponse, error) {
	out := new(AccessRequestResponse)
	err := c.cc.Invoke(ctx, ServerNode_RequestLeadership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) IExist(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ServerNode_IExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) IAmLeader(ctx context.Context, in *ConnectionAnnouncement, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ServerNode_IAmLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerNodeServer is the server API for ServerNode service.
// All implementations must embed UnimplementedServerNodeServer
// for forward compatibility
type ServerNodeServer interface {
	// API for clients:
	// dont know if (void) can be expressed like this
	Bid(context.Context, *BidInput) (*Confirmation, error)
	Result(context.Context, *Empty) (*Outcome, error)
	AnnounceConnection(context.Context, *ConnectionAnnouncement) (*Confirmation, error)
	AnnounceUpdate(context.Context, *UpdateAnnouncement) (*Confirmation, error)
	RequestLeadership(context.Context, *AccessRequest) (*AccessRequestResponse, error)
	IExist(context.Context, *Empty) (*Empty, error)
	IAmLeader(context.Context, *ConnectionAnnouncement) (*Empty, error)
	mustEmbedUnimplementedServerNodeServer()
}

// UnimplementedServerNodeServer must be embedded to have forward compatible implementations.
type UnimplementedServerNodeServer struct {
}

func (UnimplementedServerNodeServer) Bid(context.Context, *BidInput) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedServerNodeServer) Result(context.Context, *Empty) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedServerNodeServer) AnnounceConnection(context.Context, *ConnectionAnnouncement) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceConnection not implemented")
}
func (UnimplementedServerNodeServer) AnnounceUpdate(context.Context, *UpdateAnnouncement) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceUpdate not implemented")
}
func (UnimplementedServerNodeServer) RequestLeadership(context.Context, *AccessRequest) (*AccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLeadership not implemented")
}
func (UnimplementedServerNodeServer) IExist(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IExist not implemented")
}
func (UnimplementedServerNodeServer) IAmLeader(context.Context, *ConnectionAnnouncement) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IAmLeader not implemented")
}
func (UnimplementedServerNodeServer) mustEmbedUnimplementedServerNodeServer() {}

// UnsafeServerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerNodeServer will
// result in compilation errors.
type UnsafeServerNodeServer interface {
	mustEmbedUnimplementedServerNodeServer()
}

func RegisterServerNodeServer(s grpc.ServiceRegistrar, srv ServerNodeServer) {
	s.RegisterService(&ServerNode_ServiceDesc, srv)
}

func _ServerNode_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_Bid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).Bid(ctx, req.(*BidInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_Result_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).Result(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_AnnounceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).AnnounceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_AnnounceConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).AnnounceConnection(ctx, req.(*ConnectionAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_AnnounceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).AnnounceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_AnnounceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).AnnounceUpdate(ctx, req.(*UpdateAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_RequestLeadership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).RequestLeadership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_RequestLeadership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).RequestLeadership(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_IExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).IExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_IExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).IExist(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_IAmLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).IAmLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_IAmLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).IAmLeader(ctx, req.(*ConnectionAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerNode_ServiceDesc is the grpc.ServiceDesc for ServerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homework5.ServerNode",
	HandlerType: (*ServerNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bid",
			Handler:    _ServerNode_Bid_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _ServerNode_Result_Handler,
		},
		{
			MethodName: "AnnounceConnection",
			Handler:    _ServerNode_AnnounceConnection_Handler,
		},
		{
			MethodName: "AnnounceUpdate",
			Handler:    _ServerNode_AnnounceUpdate_Handler,
		},
		{
			MethodName: "RequestLeadership",
			Handler:    _ServerNode_RequestLeadership_Handler,
		},
		{
			MethodName: "IExist",
			Handler:    _ServerNode_IExist_Handler,
		},
		{
			MethodName: "IAmLeader",
			Handler:    _ServerNode_IAmLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

const ()

// ClientNodeClient is the client API for ClientNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientNodeClient interface {
}

type clientNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewClientNodeClient(cc grpc.ClientConnInterface) ClientNodeClient {
	return &clientNodeClient{cc}
}

// ClientNodeServer is the server API for ClientNode service.
// All implementations must embed UnimplementedClientNodeServer
// for forward compatibility
type ClientNodeServer interface {
	mustEmbedUnimplementedClientNodeServer()
}

// UnimplementedClientNodeServer must be embedded to have forward compatible implementations.
type UnimplementedClientNodeServer struct {
}

func (UnimplementedClientNodeServer) mustEmbedUnimplementedClientNodeServer() {}

// UnsafeClientNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientNodeServer will
// result in compilation errors.
type UnsafeClientNodeServer interface {
	mustEmbedUnimplementedClientNodeServer()
}

func RegisterClientNodeServer(s grpc.ServiceRegistrar, srv ClientNodeServer) {
	s.RegisterService(&ClientNode_ServiceDesc, srv)
}

// ClientNode_ServiceDesc is the grpc.ServiceDesc for ClientNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homework5.ClientNode",
	HandlerType: (*ClientNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto.proto",
}
